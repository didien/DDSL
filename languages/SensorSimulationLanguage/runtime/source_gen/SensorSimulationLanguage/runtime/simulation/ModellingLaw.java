package SensorSimulationLanguage.runtime.simulation;

/*Generated by MPS */

import java.util.List;
import javafx.util.Pair;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;

public class ModellingLaw extends IDataSource {
  protected String name;
  protected int updatePeriod;
  protected int samplingFrequency;
  protected int resetPeriod;

  private int lowerBound;
  private int upperBound;
  private List<Pair<Integer, String>> constraints;

  public ModellingLaw(String name, int lower, int upper, int update, int sampling) {
    this.name = name;
    lowerBound = lower;
    upperBound = upper;
    updatePeriod = update;
    samplingFrequency = sampling;
    resetPeriod = 0;
    constraints = new ArrayList<Pair<Integer, String>>();
  }

  public void addConstraint(int bound, String closure) {
    constraints.add(new Pair<Integer, String>(bound, closure));
  }

  @Override
  public String getNext() {
    int tick = 52400;

    for (Pair<Integer, String> constraint : ListSequence.fromList(constraints)) {
      if (tick < constraint.getKey()) {
        Expression e = new ExpressionBuilder(constraint.getValue()).variable("x").build().setVariable("x", tick);
        return Double.toString(e.evaluate());
      }
    }

    return "";
  }
}
